#!/bin/bash

## Check if the script was executed as root
[[ "$EUID" -ne 0 ]] && echo "Please run as root" && exit 1

## Load the config file
SCRIPTSDIRS="$( cd "$( dirname "${BASH_SOURCE[0]}" )" > /dev/null 2>&1 && pwd )"
source "${SCRIPTSDIRS}/config"

## Check libvirtd
[[ $(systemctl status libvirtd | grep running) ]] || systemctl start libvirtd && sleep 1 && LIBVIRTD=STOPPED

## Memory lock limit
[[ $ULIMIT != $ULIMIT_TARGET ]] && ulimit -l $ULIMIT_TARGET

## Load hugepages ((RAM * 1050) / 2)
sysctl -qw vm.drop_caches=1
sysctl -qw vm.compact_memory=1
echo "$HUGEPAGES" > /proc/sys/vm/nr_hugepages

## Kill the Display Manager
systemctl stop $DSPMGR
sleep 1

## Kill the console
echo 0 > /sys/class/vtconsole/vtcon0/bind
echo 0 > /sys/class/vtconsole/vtcon1/bind
echo efi-framebuffer.0 > /sys/bus/platform/drivers/efi-framebuffer/unbind

## Detach DEVICES
virsh nodedev-detach $VIRSH_GPU > /dev/null 2>&1
virsh nodedev-detach $VIRSH_GPU_AUDIO > /dev/null 2>&1
virsh nodedev-detach $VIRSH_PCI_AUDIO > /dev/null 2>&1

## Load vfio
modprobe vfio-pci

## QEMU (VM) command
qemu-system-x86_64 -runas $VM_USER -enable-kvm -M q35 \
  -nographic -vga none -parallel none -serial none \
  -m $RAM -mem-path /dev/hugepages \
  -cpu host,hypervisor,topoext,kvm=off,hv_relaxed,hv_spinlocks=0x1fff,hv_time,hv_vapic,hv_vendor_id=0xDEADBEEFFF \
  -rtc clock=host,base=localtime \
  -smp $CORES,sockets=1,cores=$(( $CORES / 2 )),threads=2 \
  -device pcie-root-port,bus=pcie.0,multifunction=on,port=1,chassis=1,id=port.1 \
  -device vfio-pci,host=$IOMMU_GPU,bus=port.1,multifunction=on \
  -device vfio-pci,host=$IOMMU_GPU_AUDIO,bus=port.1 \
  -device vfio-pci,host=$IOMMU_PCI_AUDIO \
  -drive if=pflash,format=raw,readonly,file=$OVMF_CODE \
  -drive if=pflash,format=raw,file=$OVMF_VARS \
  -usb -device usb-kbd -device usb-mouse \
  -object input-linux,id=kbd,evdev=/dev/input/by-id/$EVENTIF01,grab_all=on,repeat=on \
  -object input-linux,id=kbd2,evdev=/dev/input/by-id/$EVENTKBD,grab_all=on,repeat=on \
  -object input-linux,id=mouse,evdev=/dev/input/by-id/$EVENTMOUSE \
  -drive id=disk0,if=virtio,cache=off,aio=threads,format=qcow2,file=$DUMMY_IMG \
  -drive file=$DUMMY_ISO,index=1,media=cdrom >> $LOG 2>&1 &

## Wait for QEMU
wait

## Unload vfio
modprobe -r vfio-pci
modprobe -r vfio_iommu_type1
modprobe -r vfio

## Reattach DEVICES
virsh nodedev-reattach $VIRSH_PCI_AUDIO > /dev/null 2>&1
virsh nodedev-reattach $VIRSH_GPU_AUDIO > /dev/null 2>&1
virsh nodedev-reattach $VIRSH_GPU > /dev/null 2>&1

## Reload the framebuffer and console
echo 1 > /sys/class/vtconsole/vtcon0/bind
#nvidia-xconfig --query-gpu-info > /dev/null 2>&1
echo "efi-framebuffer.0" > /sys/bus/platform/drivers/efi-framebuffer/bind

## Unload hugepages
echo 0 > /proc/sys/vm/nr_hugepages

## Reload the Display Manager
systemctl start $DSPMGR

## If libvirtd was stopped then stop it
[[ $LIBVIRTD == "STOPPED" ]] && systemctl stop libvirtd

## Restore ulimit
ulimit -l $ULIMIT
